# ---------------------------------------------------------------------------
# Repo: https://github.com/ceremcem/assembly-dimensions
# ---------------------------------------------------------------------------
import FreeCAD
import re 
echo = FreeCAD.Console.PrintMessage


def get_plane(p1, p2, p3): 
	edge1 = p1 - p2 
	edge2 = p1 - p3 
	normal = edge1.cross(edge2)
	return (p1, normal)

def get_element_plane(shape):
    v = shape.Vertexes
    return get_plane(v[0].Point, v[1].Point, v[2].Point)

doc_name = App.ActiveDocument.Label

sheets = App.ActiveDocument.findObjects('Spreadsheet::Sheet')
cmd_regex = re.compile('^#!\s?([a-z-]+)\s?(.*)')

alph = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
max_null_cells = 3

def get_shape(obj):
	for f in obj:
		try: 
			if f.Shape:
				return f.Shape 
		except:
			pass

def calc_dist(label1, label2):
	shape1 = get_shape(App.ActiveDocument.getObjectsByLabel(label1))
	shape2 = get_shape(App.ActiveDocument.getObjectsByLabel(label2))
	x1 = shape1.Vertexes[0].Point 
	x2 = get_element_plane(shape2)
	dist = x1.distanceToPlane(*x2)
	return dist 

def calc_dist2(label1, label2):
	#echo("App.ActiveDocument.getObjectsByLabel('%s')[0].Shape" % label1)
	shape1 = get_shape(App.ActiveDocument.getObjectsByLabel(label1))
	shape2 = get_shape(App.ActiveDocument.getObjectsByLabel(label2))
	dist = shape1.Vertexes[0].Point.distanceToPlane(shape2.BoundBox.Center, shape2.Faces[0].Surface.Axis)
	return dist 


for sheet in sheets: 
	null_rows = 0
	for col_index in range(0, len(alph)-1):
		col = alph[col_index] 
		for row in range(1, 100):
			cell = '%s%d'  % (col, row)
			#echo('searching %s, ' % cell)
			try:
				content = sheet.get(cell)
			except: 
				null_rows += 1	
				if null_rows > max_null_cells:
					break
				else:
					continue 
			null_rows = 0
			
			try:
				search = cmd_regex.search(content)
			except:
				continue 

			if search: 
				#echo('command row found: ' + content)
				cmd = search.group(1)
				try: 
					args = search.group(2)
				except: 
					args = '' 
				#echo("command is: %s param is: %s\n" % (cmd, args))
	
				# Use document name as parameter source 
				if cmd == 'doc-name' and len(args) > 0: 
					regex_pattern = re.compile(args)
					match = regex_pattern.search(doc_name)
					echo('found regex: %s\n' % args)
					if match:
						for g in range(0, len(match.groups())):
							sheet.set('%s%d' % (alph[g + col_index + 1], row), match.group(g+1))
	
				elif cmd == 'distance' or cmd == 'dist':
					_from, label1, _to, label2 = args.split()
					if _from == 'from' and _to == 'to':
						echo('Distance from %s to %s: ' % (label1, label2))
						try:			
							#dist = calc_dist(label1, label2)	
							dist = calc_dist2(label1, label2)

							if dist < 0:
								dist = -dist
							dest_cell = '%s%d' % (alph[col_index + 1], row)
							sheet.set(dest_cell, '=%f mm' % dist)
							echo('%f mm (written into %s)\n' % (dist, dest_cell))	
						except Exception, e:
							echo('ERROR while calculating distance:')
							raise e

App.ActiveDocument.recompute()
